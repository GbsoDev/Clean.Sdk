trigger:
  branches:
    include:
      - main
      - release
  paths:
    include:
      - 'Clean.Sdk.Domain/*'
      - 'Clean.Sdk.Data.EfCore/*'
      - 'Clean.Sdk.Application/*'
      - 'Clean.Sdk.Infrastructure/*'
pr: none

pool:
  name: self-hosted
variables:
  majorVersion: $(majorVersion)
  minorVersion: $(minorVersion)
  packVersion: ''
  ${{ if endsWith( variables['Build.SourceBranchName'], 'main' ) }}: 
    packVersionSuffix: ''
    buildConfiguration: 'Release'
  ${{ else }}: 
    packVersionSuffix: '-$(Build.SourceBranchName)'
    buildConfiguration: 'Prerelease'
stages:
- stage: GetReleaseVersionValues
  displayName: 'Get Release Version Values'
  jobs:
  - job:
    displayName: 'Get Release Version Values Job'
    variables:
      patchVersion: $[counter(format('{0}.{1}', variables['majorVersion'], variables['minorVersion']), 1)]
    steps:
    - checkout: self
    - task: PowerShell@2
      displayName: 'Get Main Project Version Script'
      inputs:
        targetType: 'inline'
        script: |
          $majorVersion = $env:majorVersion
          $minorVersion = $env:minorVersion
          $patchVersion = $env:patchVersion
          $packVersion = $env:packVersion
          $packVersionSuffix = $env:packVersionSuffix
          $buildConfiguration = $env:buildConfiguration
          
          Write-Host "##vso[task.setvariable variable=patchVersion]$patchVersion"
          Write-Host "##vso[task.setvariable variable=packVersion]$majorVersion.$minorVersion.$patchVersion"
          Write-Host "##vso[task.setvariable variable=packVersionSuffix]$packVersionSuffix"
          Write-Host "##vso[task.setvariable variable=buildConfiguration]$buildConfiguration"
